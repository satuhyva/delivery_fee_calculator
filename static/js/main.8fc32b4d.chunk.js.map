{"version":3,"sources":["styles/styles.ts","app/FormInput.tsx","app/getFormInputConstants.ts","app/validateNumberStringInput.ts","app/DateTimeInput.tsx","fee_calculations/calculateDeliveryFee.ts","app/App.tsx","app/getDefaultDateTime.ts","index.tsx"],"names":["useStyles","makeStyles","createStyles","appContainer","display","flexDirection","justifyContent","alignItems","marginTop","containerWithTopMargin","FormInput","currentValue","label","onChange","useState","unit","maxValue","errorMessage","Error","getFormInputConstants","inputConstants","setErrorMessage","classes","className","FormControl","variant","TextField","id","error","value","style","width","InputProps","endAdornment","Typography","helperText","event","text","data","target","RegExp","test","parseFloat","DateTimeInput","Date","LocalizationProvider","dateAdapter","AdapterDateFns","DateTimePicker","renderInput","props","minDateTime","addNumbersHandleJSImprecision","number1","number2","calculateSmallValueExtra","cartValueEuros","limit","calculateDistanceDependentExtra","deliveryDistanceMeters","baseDistance","baseExtra","additionalDistance","addtionalExtra","extra","distance","calculateAmountDependentExtra","amountItems","amountLimit","amountExtra","numberAboveLimit","calculateTimeDependentExtra","time","rushDay","rushStart","rushEnd","cumulatedFee","multiplier","getDateTimeComponents","day","hours","split_1","split","trim","parseInt","App","cartValue","setCartValue","deliveryDistance","setDeliveryDistance","setAmountItems","date","minutes","getMinutes","timings","index","length","setMinutes","getDefaultDateTime","dateTime","setDateTime","undefined","deliveryFee","setDeliveryFee","useEffect","Button","onClick","result","input","fee","smallValueDependentExtra","distanceDependentExtra","amountDependentExtra","timeDependentExtra","Math","min","calculateDeliveryFee","toUTCString","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fc32b4d.chunk.js","sourcesContent":["import { createStyles, makeStyles } from '@mui/styles'\n\n\nexport const useStyles = makeStyles(() => \n    createStyles({\n        appContainer: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 50\n        },\n        containerWithTopMargin: {\n            marginTop: 30\n        },\n    })\n)","import React, { useState } from 'react'\nimport TextField from '@mui/material/TextField'\nimport FormControl from '@mui/material/FormControl'\nimport Typography from '@mui/material/Typography'\nimport { validateNumberStringInput } from './validateNumberStringInput'\nimport { FormInputLabel } from '../types/FormInputLabel'\nimport { getFormInputConstants } from './getFormInputConstants'\nimport { useStyles } from '../styles/styles'\n\n\n\ntype FormInputProps = {\n    currentValue: string\n    label: FormInputLabel,\n    onChange: (newValue: string) => void,\n}\n\nconst FormInput: React.FC<FormInputProps> = ({ currentValue, label, onChange }) => {\n\n    const [inputConstants] = useState(getFormInputConstants(label))\n    const [errorMessage, setErrorMessage] = useState('')\n    const classes = useStyles()\n    \n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const data = event.target.value\n        const dataIsNumber = validateNumberStringInput(data, inputConstants.unit)\n        if (dataIsNumber) {\n            onChange(data)\n            const dataAsNumber = parseFloat(data)\n            if (dataAsNumber > inputConstants.maxValue) setErrorMessage(inputConstants.errorMessage) \n            else setErrorMessage('')\n        }\n    }\n\n    return (\n        <div className={classes.containerWithTopMargin}>\n            <FormControl  variant='outlined'>\n                <TextField\n                    id={`input-${label}`}\n                    error={errorMessage !== ''}\n                    value={currentValue}\n                    label={inputConstants.label}\n                    variant='outlined'\n                    style={{ width: 350 }}\n                    InputProps={{ endAdornment: <Typography>{inputConstants.unit}</Typography> }}\n                    helperText={errorMessage}\n                    onChange={handleChange}\n                />              \n            </FormControl>\n        </div>\n    )\n}\nexport default FormInput\n\n","import { FormInputConstants } from '../types/FormInputConstants'\nimport { FormInputLabel } from '../types/FormInputLabel'\n\n\nconst MAX_CART_VALUE = 10000\nconst MAX_DISTANCE = 15000\nconst MAX_AMOUNT_ITEMS = 500\n\n\nexport const getFormInputConstants = (label: FormInputLabel): FormInputConstants => {\n    switch (label) {\n    case 'Cart value':\n        return {\n            unit: '€',\n            label: label,\n            maxValue: MAX_CART_VALUE,\n            errorMessage: `Maximum allowed cart value is ${MAX_CART_VALUE}€`\n        }\n    case 'Delivery distance':\n        return {\n            unit: 'm',\n            label: label,\n            maxValue: MAX_DISTANCE,\n            errorMessage: `Maximum allowed delivery distance is ${MAX_DISTANCE}m`\n        }\n    case 'Amount of items':\n        return {\n            unit: '',\n            label: label,\n            maxValue: MAX_AMOUNT_ITEMS,\n            errorMessage: `Maximum allowed amount of items is ${MAX_AMOUNT_ITEMS}`\n        }\n    default:\n        throw new Error('Form input label not recognized!')\n    }\n}","export const validateNumberStringInput = (text: string, unit: string): boolean => {\n    const numbersRegex = '^[0-9]{0,5}$'\n    const currencyRegex = '^[0-9]*[.,]?[0-9]{0,2}$'  \n    return new RegExp(unit === '€' ? currencyRegex : numbersRegex).test(text) \n}","import React from 'react'\nimport DateTimePicker from '@mui/lab/DateTimePicker'\nimport AdapterDateFns from '@mui/lab/AdapterDateFns'\nimport LocalizationProvider from '@mui/lab/LocalizationProvider'\nimport { TextField } from '@mui/material'\nimport { useStyles } from '../styles/styles'\n\n\n\ntype DateTimeInputProps = {\n    currentValue: Date | null\n    onChange: (newValue: Date | null) => void,\n}\n\n\nconst DateTimeInput: React.FC<DateTimeInputProps> = ({ currentValue, onChange }) => {\n\n    const classes = useStyles()\n    const errorMessage = currentValue && currentValue <= new Date() ?\n        'Only time points in future are allowed' : ''\n\n    return (\n        <div className={classes.containerWithTopMargin}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                <DateTimePicker\n                    renderInput={(props) => \n                        <TextField \n                            {...props} \n                            id='input-Date and time'\n                            style={{ width: 350 }}\n                            helperText={errorMessage ? errorMessage : ''}\n                        />}\n                    label='Date and Time'\n                    value={currentValue}\n                    onChange={onChange}\n                    minDateTime={new Date()}\n                />  \n            </LocalizationProvider>\n        </div>\n    )\n}\nexport default DateTimeInput","import { CalculatorInput } from '../types/CalculatorInput'\n\n\nconst SMALL_VALUE_LIMIT = 10\nconst BASE_DISTANCE = 1000\nconst EXTRA_FOR_BASE_DISTANCE = 2\nconst ADDITIONAL_DISTANCE = 500\nconst EXTRA_FOR_ADDITIONAL_DISTANCE = 1\nconst AMOUNT_LIMIT = 5\nconst AMOUNT_EXTRA = 0.5\nconst MAX_FEE = 15\nconst NO_FEE_LIMIT = 100     \nconst RUSH_DAY = 'Fri'\nconst RUSH_START_HOUR = 15\nconst RUSH_END_HOUR = 19  \nconst RUSH_MULTIPLIER = 1.1                  \n\n\nexport const calculateDeliveryFee = (input: CalculatorInput): number => {\n\n    // TODO: tarkistetaan vielä tässä ensin, että syötetään oikeanlaista dataa\n    const { cartValueEuros, deliveryDistanceMeters, amountItems, time} = input\n\n    if (cartValueEuros >= NO_FEE_LIMIT) return 0\n\n    let fee = 0\n\n    const smallValueDependentExtra = calculateSmallValueExtra(cartValueEuros, SMALL_VALUE_LIMIT)\n    fee = addNumbersHandleJSImprecision(fee, smallValueDependentExtra)\n\n    const distanceDependentExtra = calculateDistanceDependentExtra(\n        deliveryDistanceMeters, BASE_DISTANCE, EXTRA_FOR_BASE_DISTANCE, ADDITIONAL_DISTANCE, EXTRA_FOR_ADDITIONAL_DISTANCE)\n    fee = addNumbersHandleJSImprecision(fee, distanceDependentExtra)\n    \n    const amountDependentExtra = calculateAmountDependentExtra(amountItems, AMOUNT_LIMIT, AMOUNT_EXTRA)\n    fee = addNumbersHandleJSImprecision(fee, amountDependentExtra)\n\n    const timeDependentExtra = calculateTimeDependentExtra(time, RUSH_DAY, RUSH_START_HOUR, RUSH_END_HOUR, fee, RUSH_MULTIPLIER)\n    fee = addNumbersHandleJSImprecision(fee, timeDependentExtra)\n\n    return Math.min(fee, MAX_FEE)\n}   \n\nexport const addNumbersHandleJSImprecision = (number1: number, number2: number): number => {\n    return (number1 * 100 + number2 * 100) / 100\n}\n\n\nexport const calculateSmallValueExtra = (cartValueEuros: number, limit: number): number => {\n    if (cartValueEuros > limit || cartValueEuros < 0) return 0\n    return (limit * 100 - cartValueEuros * 100) / 100\n}\n\n\nexport const calculateDistanceDependentExtra = (\n    deliveryDistanceMeters: number,\n    baseDistance: number,\n    baseExtra: number,\n    additionalDistance: number,\n    addtionalExtra: number\n): number => {\n    let extra = baseExtra\n    let distance = deliveryDistanceMeters - baseDistance\n    while (distance > 0) {\n        extra += addtionalExtra\n        distance -= additionalDistance\n    }\n    return extra\n}\n\n\nexport const calculateAmountDependentExtra = (amountItems: number, amountLimit: number, amountExtra: number): number => {\n    const numberAboveLimit = amountItems - amountLimit + 1\n    if (numberAboveLimit > 0) {\n        return numberAboveLimit * amountExtra\n    }\n    return 0\n}\n\n\nexport const calculateTimeDependentExtra = (\n    time: string, rushDay: string, rushStart: number, rushEnd: number, cumulatedFee: number, multiplier: number\n): number => {\n\n    const { day, hours } = getDateTimeComponents(time)\n    if (day === rushDay) {\n        if (hours >= rushStart && hours < rushEnd) {\n            return (multiplier * 10 - 10) * cumulatedFee / 10\n        }\n    }\n    return 0\n}\n\n\nconst getDateTimeComponents = (time: string): { day: string, hours: number } => {\n    const split_1 = time.split(',')\n    const day = split_1[0]\n    const split_2 = split_1[1].trim().split(' ')\n    const timeDetails = split_2[3]\n    const split_3 = timeDetails.split(':')\n    const hours = split_3[0]\n    return { day: day, hours: parseInt(hours) }\n}\n\n","import React, { useState, useEffect } from 'react'\nimport Typography from '@mui/material/Typography'\nimport FormInput from './FormInput'\nimport DateTimeInput from './DateTimeInput'\nimport { getDefaultDateTime } from './getDefaultDateTime'\nimport Button from '@mui/material/Button'\nimport { useStyles } from '../styles/styles'\nimport { CalculatorInput } from '../types/CalculatorInput'\nimport { calculateDeliveryFee } from '../fee_calculations/calculateDeliveryFee'\n\n\n\nconst App = () => {\n\n    const [cartValue, setCartValue] = useState('')\n    const [deliveryDistance, setDeliveryDistance] = useState('')\n    const [amountItems, setAmountItems] = useState('')\n    const [dateTime, setDateTime] = useState<Date | null>(getDefaultDateTime(new Date()))\n    const [deliveryFee, setDeliveryFee] = useState<number | undefined>(undefined)\n    const classes = useStyles()\n\n    useEffect(() => {\n        if (deliveryFee) setDeliveryFee(undefined)\n    },[cartValue, deliveryDistance, amountItems, dateTime])\n\n    const calculateFee = () => {\n        if (!dateTime) return\n        const calculatorInput: CalculatorInput = {\n            cartValueEuros: parseFloat(cartValue),\n            deliveryDistanceMeters: parseInt(deliveryDistance),\n            amountItems: parseInt(amountItems),\n            time: dateTime.toUTCString()\n        }\n        const result = calculateDeliveryFee(calculatorInput)\n        setDeliveryFee(result)\n    }\n\n    const allFieldsHaveValues = () => {\n        return cartValue && deliveryDistance && amountItems && dateTime\n    }\n\n\n\n\n    return (\n        <div className={classes.appContainer}>\n\n            <Typography variant='h5'><strong>DELIVERY FEE CALCULATOR</strong></Typography>\n\n            <FormInput\n                currentValue={cartValue}\n                label='Cart value'\n                onChange={setCartValue}\n            />\n            <FormInput\n                currentValue={deliveryDistance}\n                label='Delivery distance'\n                onChange={setDeliveryDistance}\n            />\n            <FormInput\n                currentValue={amountItems}\n                label='Amount of items'\n                onChange={setAmountItems}\n            />\n            <DateTimeInput\n                currentValue={dateTime}\n                onChange={setDateTime}\n            />\n\n            <div className={classes.containerWithTopMargin}>\n                <Button \n                    id='button-calculate'\n                    variant='contained'\n                    onClick={calculateFee}\n                    disabled={!allFieldsHaveValues()}\n                >\n                    CALCULATE\n                </Button>\n            </div>  \n\n            {deliveryFee &&\n                <div className={classes.containerWithTopMargin} id='calculated-fee'>\n                    <Typography variant='h5'>\n                        <strong>{`FEE is ${deliveryFee} €`}</strong>\n                    </Typography>\n                </div> \n            }   \n     \n        </div>\n    )\n}\nexport default App\n\n","export const getDefaultDateTime = (date: Date): Date => {\n    const minutes = date.getMinutes() + 30\n    const timings = [15, 30, 45, 60, 75, 90]\n    let index = 0\n    while (index < timings.length) {\n        if (minutes <= timings[index]) {\n            date.setMinutes(timings[index])\n            break\n        }\n        index++\n    }\n    return date\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app/App'\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}