{"version":3,"sources":["styles/styles.ts","app/getFormInputConstants.ts","app/useFormInput.ts","app/validateNumberStringInput.ts","app/FormInput.tsx","app/DateTimeInput.tsx","fee_calculations/calculateDeliveryFee.ts","app/inputFieldsHaveProperValues.ts","app/App.tsx","app/getDefaultDateTime.ts","index.tsx"],"names":["useStyles","makeStyles","createStyles","appContainer","display","flexDirection","justifyContent","alignItems","marginTop","containerWithTopMargin","inputField","width","MAX_CART_VALUE","MAX_DISTANCE","useFormInput","label","onChange","useState","unit","maxValue","errorMessage","Error","getFormInputConstants","inputConstants","setErrorMessage","handleChange","event","text","data","target","value","RegExp","test","parseFloat","FormInput","currentValue","classes","className","TextField","id","error","variant","InputProps","endAdornment","Typography","helperText","DateTimeInput","Date","LocalizationProvider","dateAdapter","AdapterDateFns","DateTimePicker","renderInput","props","minDateTime","calculateSmallValueExtra","cartValueEuros","limit","toFixed","calculateDistanceDependentExtra","deliveryDistanceMeters","baseDistance","baseExtra","additionalDistance","addtionalExtra","extra","distance","calculateAmountDependentExtra","amountItems","amountLimit","amountExtra","numberAboveLimit","calculateTimeDependentExtra","time","rushDay","rushStart","rushEnd","cumulatedFee","multiplier","getDateTimeComponents","day","hours","split_1","split","trim","parseInt","inputFieldsHaveProperValues","cartValue","deliveryDistance","dateTime","replace","App","setCartValue","setDeliveryDistance","setAmountItems","date","minutes","getMinutes","timings","index","length","setMinutes","getDefaultDateTime","setDateTime","deliveryFee","setDeliveryFee","useEffect","Button","onClick","result","input","fee","Math","min","calculateDeliveryFee","toUTCString","console","log","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b841b4de.chunk.js","sourcesContent":["import { createStyles, makeStyles } from '@mui/styles'\n\n\nexport const useStyles = makeStyles(() => \n    createStyles({\n        appContainer: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 50,\n        },\n        containerWithTopMargin: {\n            marginTop: 30,\n        },\n        inputField: {\n            width: 350,\n        },\n    })\n)","import { FormInputConstants } from '../types/FormInputConstants'\nimport { FormInputLabel } from '../types/FormInputLabel'\n\n\nexport const MAX_CART_VALUE = 10000\nexport const MAX_DISTANCE = 15000\nexport const MAX_AMOUNT_ITEMS = 500\n\n\nexport const getFormInputConstants = (label: FormInputLabel): FormInputConstants => {\n    switch (label) {\n    case 'Cart value':\n        return {\n            unit: '€',\n            label: label,\n            maxValue: MAX_CART_VALUE,\n            errorMessage: `Maximum allowed cart value is ${MAX_CART_VALUE}€`\n        }\n    case 'Delivery distance':\n        return {\n            unit: 'm',\n            label: label,\n            maxValue: MAX_DISTANCE,\n            errorMessage: `Maximum allowed delivery distance is ${MAX_DISTANCE}m`\n        }\n    case 'Amount of items':\n        return {\n            unit: '',\n            label: label,\n            maxValue: MAX_AMOUNT_ITEMS,\n            errorMessage: `Maximum allowed amount of items is ${MAX_AMOUNT_ITEMS}`\n        }\n    default:\n        throw new Error('Form input label not recognized!')\n    }\n}","import React, { useState } from 'react'\nimport { validateNumberStringInput } from './validateNumberStringInput'\nimport { FormInputLabel } from '../types/FormInputLabel'\nimport { getFormInputConstants } from './getFormInputConstants'\n\n\n\ntype UseFormInput = {\n    unit: string,\n    errorMessage: string,\n    handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\n}\n\nexport const useFormInput = (label: FormInputLabel, onChange: (newValue: string) => void): UseFormInput => {\n\n    const [inputConstants] = useState(getFormInputConstants(label))\n    const [errorMessage, setErrorMessage] = useState('')\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const data = event.target.value\n        const dataIsNumber = validateNumberStringInput(data, inputConstants.unit)\n        if (dataIsNumber) {\n            onChange(data)\n            const dataAsNumber = parseFloat(data)\n            if (dataAsNumber > inputConstants.maxValue) setErrorMessage(inputConstants.errorMessage) \n            else setErrorMessage('')\n        }\n    }\n\n    return {\n        unit: inputConstants.unit,\n        errorMessage: errorMessage,\n        handleChange: handleChange\n    }\n\n\n}","export const validateNumberStringInput = (text: string, unit: string): boolean => {\n    const numbersRegex = '^[0-9]{0,5}$'\n    const currencyRegex = '^[0-9]*[.,]?[0-9]{0,2}$'  \n    return new RegExp(unit === '€' ? currencyRegex : numbersRegex).test(text) \n}","import React from 'react'\nimport TextField from '@mui/material/TextField'\nimport Typography from '@mui/material/Typography'\nimport { FormInputLabel } from '../types/FormInputLabel'\nimport { useStyles } from '../styles/styles'\nimport { useFormInput } from './useFormInput'\n\n\ntype FormInputProps = {\n    currentValue: string\n    label: FormInputLabel,\n    onChange: (newValue: string) => void,\n}\n\nconst FormInput: React.FC<FormInputProps> = ({ currentValue, label, onChange }) => {\n\n\n    const { unit, errorMessage, handleChange } = useFormInput(label, onChange)\n    const classes = useStyles()\n\n    return (\n        <div className={classes.containerWithTopMargin}>\n            <TextField\n                id={`input-${label}`}\n                error={errorMessage !== ''}\n                value={currentValue}\n                label={label}\n                variant='outlined'\n                className={classes.inputField}\n                InputProps={{ endAdornment: <Typography>{unit}</Typography> }}\n                helperText={errorMessage}\n                onChange={handleChange}\n            />              \n        </div>\n    )\n}\nexport default FormInput\n\n","import React from 'react'\nimport DateTimePicker from '@mui/lab/DateTimePicker'\nimport AdapterDateFns from '@mui/lab/AdapterDateFns'\nimport LocalizationProvider from '@mui/lab/LocalizationProvider'\nimport { TextField } from '@mui/material'\nimport { useStyles } from '../styles/styles'\n\n\n\ntype DateTimeInputProps = {\n    currentValue: Date | null\n    onChange: (newValue: Date | null) => void,\n}\n\n\nconst DateTimeInput: React.FC<DateTimeInputProps> = ({ currentValue, onChange }) => {\n\n    const classes = useStyles()\n    const errorMessage = currentValue && currentValue <= new Date() ?\n        'Only time points in future are allowed' : ''\n\n    return (\n        <div className={classes.containerWithTopMargin}>\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                <DateTimePicker\n                    renderInput={(props) => \n                        <TextField \n                            {...props} \n                            id='input-Date and time'\n                            className={classes.inputField}\n                            helperText={errorMessage ? errorMessage : ''}\n                        />}\n                    label='Date and Time'\n                    value={currentValue}\n                    onChange={onChange}\n                    minDateTime={new Date()}\n                />  \n            </LocalizationProvider>\n        </div>\n    )\n}\nexport default DateTimeInput","import { CalculatorInput } from '../types/CalculatorInput'\n\n\nconst SMALL_VALUE_LIMIT = 10\nconst BASE_DISTANCE = 1000\nconst EXTRA_FOR_BASE_DISTANCE = 2\nconst ADDITIONAL_DISTANCE = 500\nconst EXTRA_FOR_ADDITIONAL_DISTANCE = 1\nconst AMOUNT_LIMIT = 5\nconst AMOUNT_EXTRA = 0.5\nconst MAX_FEE = 15\nconst NO_FEE_LIMIT = 100     \nconst RUSH_DAY = 'Fri'\nconst RUSH_START_HOUR = 15\nconst RUSH_END_HOUR = 19  \nconst RUSH_MULTIPLIER = 1.1                  \n\n\nexport const calculateDeliveryFee = (input: CalculatorInput): number => {\n\n    const { cartValueEuros, deliveryDistanceMeters, amountItems, time} = input\n\n    if (cartValueEuros >= NO_FEE_LIMIT) return 0\n\n    let fee = 0\n    fee += calculateSmallValueExtra(cartValueEuros, SMALL_VALUE_LIMIT)\n    fee += calculateDistanceDependentExtra(\n        deliveryDistanceMeters, BASE_DISTANCE, EXTRA_FOR_BASE_DISTANCE, ADDITIONAL_DISTANCE, EXTRA_FOR_ADDITIONAL_DISTANCE)   \n    fee += calculateAmountDependentExtra(amountItems, AMOUNT_LIMIT, AMOUNT_EXTRA)\n    fee +=  calculateTimeDependentExtra(time, RUSH_DAY, RUSH_START_HOUR, RUSH_END_HOUR, fee, RUSH_MULTIPLIER)\n    return Math.min(fee, MAX_FEE)\n}   \n\n\n\nexport const calculateSmallValueExtra = (cartValueEuros: number, limit: number): number => {\n    if (cartValueEuros > limit || cartValueEuros < 0) return 0\n    return parseFloat((limit - cartValueEuros).toFixed(3))\n}\n\n\nexport const calculateDistanceDependentExtra = (\n    deliveryDistanceMeters: number,\n    baseDistance: number,\n    baseExtra: number,\n    additionalDistance: number,\n    addtionalExtra: number\n): number => {\n    let extra = baseExtra\n    let distance = deliveryDistanceMeters - baseDistance\n    while (distance > 0) {\n        extra += addtionalExtra\n        distance -= additionalDistance\n    }\n    return extra\n}\n\n\nexport const calculateAmountDependentExtra = (amountItems: number, amountLimit: number, amountExtra: number): number => {\n    const numberAboveLimit = amountItems - amountLimit + 1\n    if (numberAboveLimit > 0) {\n        return numberAboveLimit * amountExtra\n    }\n    return 0\n}\n\n\nexport const calculateTimeDependentExtra = (\n    time: string, rushDay: string, rushStart: number, rushEnd: number, cumulatedFee: number, multiplier: number\n): number => {\n\n    const { day, hours } = getDateTimeComponents(time)\n    if (day === rushDay) {\n        if (hours >= rushStart && hours < rushEnd) {\n            return parseFloat(((multiplier - 1) * cumulatedFee).toFixed(3))\n        }\n    }\n    return 0\n}\n\n\nconst getDateTimeComponents = (time: string): { day: string, hours: number } => {\n    const split_1 = time.split(',')\n    const day = split_1[0]\n    const split_2 = split_1[1].trim().split(' ')\n    const timeDetails = split_2[3]\n    const split_3 = timeDetails.split(':')\n    const hours = split_3[0]\n    return { day: day, hours: parseInt(hours) }\n}\n\n","import { MAX_CART_VALUE, MAX_DISTANCE, MAX_AMOUNT_ITEMS } from './getFormInputConstants'\n\n\nexport const inputFieldsHaveProperValues = (\n    cartValue: string, \n    deliveryDistance: string, \n    amountItems: string, \n    dateTime: Date | null\n): boolean => {\n    if (!cartValue || parseFloat(cartValue.replace(',', '.')) > MAX_CART_VALUE || cartValue === '0') return false\n    if (!deliveryDistance || parseInt(deliveryDistance) > MAX_DISTANCE || deliveryDistance === '0') return false\n    if (!amountItems || parseInt(amountItems) > MAX_AMOUNT_ITEMS || amountItems === '0') return false\n    if (!dateTime || dateTime < new Date()) return false\n    return true\n}","import React, { useState, useEffect } from 'react'\nimport Typography from '@mui/material/Typography'\nimport FormInput from './FormInput'\nimport DateTimeInput from './DateTimeInput'\nimport { getDefaultDateTime } from './getDefaultDateTime'\nimport Button from '@mui/material/Button'\nimport { useStyles } from '../styles/styles'\nimport { CalculatorInput } from '../types/CalculatorInput'\nimport { calculateDeliveryFee } from '../fee_calculations/calculateDeliveryFee'\nimport { inputFieldsHaveProperValues } from './inputFieldsHaveProperValues'\n\n\nconst App = () => {\n\n    const [cartValue, setCartValue] = useState('')\n    const [deliveryDistance, setDeliveryDistance] = useState('')\n    const [amountItems, setAmountItems] = useState('')\n    const [dateTime, setDateTime] = useState<Date | null>(getDefaultDateTime(new Date()))\n    const [deliveryFee, setDeliveryFee] = useState<string | null>(null)\n    const classes = useStyles()\n\n    useEffect(() => {\n        if (deliveryFee) setDeliveryFee(null)\n    },[cartValue, deliveryDistance, amountItems, dateTime])\n\n    const calculateFee = () => {\n        if (!dateTime) return\n        const calculatorInput: CalculatorInput = {\n            cartValueEuros: parseFloat(cartValue.replace(',', '.')),\n            deliveryDistanceMeters: parseInt(deliveryDistance),\n            amountItems: parseInt(amountItems),\n            time: dateTime.toUTCString()\n        }\n        const result = calculateDeliveryFee(calculatorInput)\n        console.log(result)\n        setDeliveryFee(result.toFixed(2))\n    }\n\n\n    return (\n        <div className={classes.appContainer}>\n\n            <Typography variant='h5'><strong>DELIVERY FEE CALCULATOR</strong></Typography>\n\n            <FormInput\n                currentValue={cartValue}\n                label='Cart value'\n                onChange={setCartValue}\n            />\n            <FormInput\n                currentValue={deliveryDistance}\n                label='Delivery distance'\n                onChange={setDeliveryDistance}\n            />\n            <FormInput\n                currentValue={amountItems}\n                label='Amount of items'\n                onChange={setAmountItems}\n            />\n            <DateTimeInput\n                currentValue={dateTime}\n                onChange={setDateTime}\n            />\n\n            <div className={classes.containerWithTopMargin}>\n                <Button \n                    id='button-calculate'\n                    variant='contained'\n                    onClick={calculateFee}\n                    disabled={!inputFieldsHaveProperValues(cartValue, deliveryDistance, amountItems, dateTime)}\n                >\n                    CALCULATE\n                </Button>\n            </div>  \n\n            {deliveryFee !== null &&\n                <div className={classes.containerWithTopMargin} id='calculated-fee'>\n                    <Typography variant='h5'>\n                        <strong>{`DELIVERY FEE is ${deliveryFee} €`}</strong>\n                    </Typography>\n                </div> \n            }   \n     \n        </div>\n    )\n}\nexport default App\n\n","export const getDefaultDateTime = (date: Date): Date => {\n    const minutes = date.getMinutes() + 30\n    const timings = [15, 30, 45, 60, 75, 90]\n    let index = 0\n    while (index < timings.length) {\n        if (minutes <= timings[index]) {\n            date.setMinutes(timings[index])\n            break\n        }\n        index++\n    }\n    return date\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app/App'\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}